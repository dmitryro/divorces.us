import React, {useEffect, useState} from 'react';
import { Grid, Row, Col } from "react-styled-flexboxgrid";
import GridContainer from "components/Grid/GridContainer.jsx";
import GridItem from "components/Grid/GridItem.jsx";
// nodejs library that concatenates classes
import classNames from "classnames";
// nodejs library to set properties for components
import PropTypes from "prop-types";
// @material-ui/core components
import withStyles from "@material-ui/core/styles/withStyles";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import IconButton from "@material-ui/core/IconButton";
import Button from "@material-ui/core/Button";
import Hidden from "@material-ui/core/Hidden";
import Drawer from "@material-ui/core/Drawer";
// @material-ui/icons
import Menu from "@material-ui/icons/Menu";
// core components
import headerStyle from "assets/jss/material-kit-react/components/headerStyle.jsx";
import Logo from "./../Logo/index.tsx";
//import Authenticate from "./../Authenticate/index.tsx";
import Submenu from "./../Submenu/index.tsx";
import SearchBar from "./../Search/index.tsx";
import Phones from "./../Phones/index.tsx";

const subsection = {
    width:'100%',
    minWidth:'30em'
}

const header = {
    width: '100%',
    background: '#CFCECE'
}

function Header(props) {
  const [mobileOpen, setMobileOpen] = useState(false);

  const headerColorChange = ()  => {
    const { classes, color, changeColorOnScroll } = props;
    const windowsScrollTop = typeof window !== 'undefined' && window.pageYOffset;

    if (windowsScrollTop > changeColorOnScroll.height) {
      document.body
        .getElementsByTagName("header")[0]
        .classList.remove(classes[color]);
      document.body
        .getElementsByTagName("header")[0]
        .classList.add(classes[changeColorOnScroll.color]);
    } else {
      document.body
        .getElementsByTagName("header")[0]
        .classList.add(classes[color]);
      document.body
        .getElementsByTagName("header")[0]
        .classList.remove(classes[changeColorOnScroll.color]);
    }
  };

  const handleDrawerToggle = () => {
      setMobileOpen(!mobileOpen);
  };

  useEffect(() =>  {
     if (props.changeColorOnScroll) {
         window.addEventListener("scroll", headerColorChange);
     }     

     if (props.changeColorOnScroll) {
      typeof window !== 'undefined' && window.removeEventListener("scroll", headerColorChange);
     }
  });

  const {
    classes,
    color,
    rightLinks,
    leftLinks,
    brand,
    fixed,
    absolute
  } = props;

  const appBarClasses = classNames({
    [classes.appBar]: true,
    [classes[color]]: color,
    [classes.absolute]: absolute,
    [classes.fixed]: fixed
  });

  const brandComponent = <Button className={classes.title}>{brand}</Button>;

  return (
      <AppBar className={appBarClasses} style={header}>
        <GridContainer justify="left"> 
        <GridItem xs={1} sm={1} md={1}>
        <Logo/> 
        </GridItem>
        <GridItem xs={11} sm={11} md={11}>
               <Grid>
                     <Row start="sm">
                      <Submenu/>
                     </Row>
                     <Row start="sm">
                      two
                     </Row>
                     <Row start="sm">
                      three
                     </Row>
               </Grid>
        </GridItem>
        </GridContainer>
      </AppBar>
  );
}

Header.defaultProp = {
  color: "white"
};

Header.propTypes = {
  classes: PropTypes.object.isRequired,
  color: PropTypes.oneOf([
    "primary",
    "info",
    "success",
    "warning",
    "danger",
    "transparent",
    "white",
    "rose",
    "dark"
  ]),
  rightLinks: PropTypes.node,
  leftLinks: PropTypes.node,
  brand: PropTypes.string,
  fixed: PropTypes.bool,
  absolute: PropTypes.bool,
  // this will cause the sidebar to change the color from
  // this.props.color (see above) to changeColorOnScroll.color
  // when the window.pageYOffset is heigher or equal to
  // changeColorOnScroll.height and then when it is smaller than
  // changeColorOnScroll.height change it back to
  // this.props.color (see above)
  changeColorOnScroll: PropTypes.shape({
    height: PropTypes.number.isRequired,
    color: PropTypes.oneOf([
      "primary",
      "info",
      "success",
      "warning",
      "danger",
      "transparent",
      "white",
      "rose",
      "dark"
    ]).isRequired
  })
};

export default withStyles(headerStyle)(Header);
